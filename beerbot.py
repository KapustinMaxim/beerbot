import logging
import sqlite3
import os
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler()]  # –¢–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è Railway
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")


class FitnessBot:
    def __init__(self):
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
        # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path = os.getenv("DATABASE_PATH", "fitness_bot.db")

        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç–∂–∏–º–∞–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS pushups (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                count INTEGER NOT NULL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–ª. –ø–∏–≤–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS beer (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                count INTEGER NOT NULL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS achievements (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                achievement_type TEXT NOT NULL,
                milestone INTEGER NOT NULL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user_id, achievement_type, milestone)
            )
        ''')

        conn.commit()
        conn.close()

    def add_pushups(self, user_id: int, username: str, count: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ–± –æ—Ç–∂–∏–º–∞–Ω–∏—è—Ö"""
        db_path = os.getenv("DATABASE_PATH", "fitness_bot.db")
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO pushups (user_id, username, count) VALUES (?, ?, ?)",
            (user_id, username, count)
        )
        conn.commit()
        conn.close()

    def add_beer(self, user_id: int, username: str, count: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–∏–≤–µ"""
        db_path = os.getenv("DATABASE_PATH", "fitness_bot.db")
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO beer (user_id, username, count) VALUES (?, ?, ?)",
            (user_id, username, count)
        )
        conn.commit()
        conn.close()

    def check_and_add_achievement(self, user_id: int, username: str, achievement_type: str, current_total: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        db_path = os.getenv("DATABASE_PATH", "fitness_bot.db")
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        milestones = {
            'pushups': [100, 250, 500, 1000, 2500, 5000, 10000],
            'beer': [1000, 2500, 5000, 10000, 25000, 50000]  # –≤ –º–ª
        }

        if achievement_type not in milestones:
            conn.close()
            return []

        new_achievements = []

        for milestone in milestones[achievement_type]:
            if current_total >= milestone:
                try:
                    cursor.execute(
                        "INSERT INTO achievements (user_id, username, achievement_type, milestone) VALUES (?, ?, ?, ?)",
                        (user_id, username, achievement_type, milestone)
                    )
                    new_achievements.append(milestone)
                except sqlite3.IntegrityError:
                    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    continue

        conn.commit()
        conn.close()
        return new_achievements

    def get_achievement_message(self, achievement_type: str, milestone: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏"""
        messages = {
            'pushups': {
                100: "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π! –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! üí™",
                250: "üî• –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! 250 –æ—Ç–∂–∏–º–∞–Ω–∏–π - –≤—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! üöÄ",
                500: "üèÜ –ü–û–¢–†–Ø–°–ê–Æ–©–ï! 500 –æ—Ç–∂–∏–º–∞–Ω–∏–π! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω! üëë\nüéØ –ú–û–ß–ò –•–£–Ø–ß!",
                1000: "ü•á –õ–ï–ì–ï–ù–î–ê–†–ù–û! 1000 –æ—Ç–∂–∏–º–∞–Ω–∏–π! –•—É—è —Ç—ã –º–æ—â–Ω—ã–π! ‚ö°",
                2500: "üåü –≠–ü–ò–ß–ù–û! 2500 –æ—Ç–∂–∏–º–∞–Ω–∏–π! –î–∞–≤–∞–π –ú–∞—à–∏–Ω–∞ –º–æ—á–∏ ü¶æ",
                5000: "üî• –ï–ë–ê–¢–¨! 5000 –æ—Ç–∂–∏–º–∞–Ω–∏–π! –ë–û–ì–û–ü–û–î–û–ë–ò–ï! ü§ñ",
                10000: "üëë –ü–∏–∑–¥–µ—Ü —Ç—ã –∫–æ–Ω—å! 10000 –æ—Ç–∂–∏–º–∞–Ω–∏–π! –í—ã –ø–æ–∫–æ—Ä–∏–ª–∏ –û–ª–∏–º–ø! üèîÔ∏è"
            },
            'beer': {
                1000: "üç∫ –õ–∏—Ç—Ä –ø–∏–≤–∞ –≤—ã–ø–∏—Ç! –ó–ê–ò–ü–ê–õ –¥–∞–≤–∞–π –æ—Ç–∂–∏–º–∞–π—Å—è! üòÑ",
                2500: "üçª 2.5 –ª–∏—Ç—Ä–∞! –í—Ä–µ–º—è —É–¥–≤–æ–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üí™",
                5000: "üç∫ 5 –ª–∏—Ç—Ä–æ–≤! –°–µ—Ä—å–µ–∑–Ω—ã–µ –æ–±—ä–µ–º—ã! –ë–∞–ª–∞–Ω—Å - —ç—Ç–æ –≤–∞–∂–Ω–æ! ‚öñÔ∏è",
                10000: "üçª 10 –ª–∏—Ç—Ä–æ–≤! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —Ü–µ–Ω–∏—Ç–µ–ª—å! –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Å–ø–æ—Ä—Ç! üèÉ‚Äç‚ôÇÔ∏è",
                25000: "üç∫ 25 –ª–∏—Ç—Ä–æ–≤! –í–ø–µ—á–∞—Ç–ª—è—é—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞! üìä",
                50000: "üçª 50 –ª–∏—Ç—Ä–æ–≤! –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üèÜ"
            }
        }

        return messages.get(achievement_type, {}).get(milestone,
                                                      f"üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {milestone} {achievement_type}!")

    def get_user_stats(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        db_path = os.getenv("DATABASE_PATH", "fitness_bot.db")
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        now = datetime.now()
        today = now.date()
        week_ago = now - timedelta(days=7)

        # –û—Ç–∂–∏–º–∞–Ω–∏—è
        # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
        cursor.execute("""
            SELECT SUM(count) FROM pushups 
            WHERE user_id = ? AND DATE(timestamp) = DATE('now')
        """, (user_id,))
        pushups_today = cursor.fetchone()[0] or 0

        # –ó–∞ –Ω–µ–¥–µ–ª—é
        cursor.execute("""
            SELECT SUM(count) FROM pushups 
            WHERE user_id = ? AND timestamp >= ?
        """, (user_id, week_ago))
        pushups_week = cursor.fetchone()[0] or 0

        # –í—Å–µ–≥–æ
        cursor.execute("""
            SELECT SUM(count) FROM pushups WHERE user_id = ?
        """, (user_id,))
        pushups_total = cursor.fetchone()[0] or 0

        # –ü–∏–≤–æ
        # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
        cursor.execute("""
            SELECT SUM(count) FROM beer 
            WHERE user_id = ? AND DATE(timestamp) = DATE('now')
        """, (user_id,))
        beer_today = cursor.fetchone()[0] or 0

        # –ó–∞ –Ω–µ–¥–µ–ª—é
        cursor.execute("""
            SELECT SUM(count) FROM beer 
            WHERE user_id = ? AND timestamp >= ?
        """, (user_id, week_ago))
        beer_week = cursor.fetchone()[0] or 0

        # –í—Å–µ–≥–æ
        cursor.execute("""
            SELECT SUM(count) FROM beer WHERE user_id = ?
        """, (user_id,))
        beer_total = cursor.fetchone()[0] or 0

        conn.close()

        return {
            'pushups': {'today': pushups_today, 'week': pushups_week, 'total': pushups_total},
            'beer': {'today': beer_today, 'week': beer_week, 'total': beer_total}
        }

    def get_all_users_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        db_path = os.getenv("DATABASE_PATH", "fitness_bot.db")
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("""
            SELECT DISTINCT user_id, username FROM (
                SELECT user_id, username FROM pushups
                UNION
                SELECT user_id, username FROM beer
            )
        """)
        users = cursor.fetchall()

        stats = []
        for user_id, username in users:
            user_stats = self.get_user_stats(user_id)
            stats.append({
                'user_id': user_id,
                'username': username or f"ID{user_id}",
                'stats': user_stats
            })

        conn.close()
        return stats


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = FitnessBot()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_text = """
üèãÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /pushup <—á–∏—Å–ª–æ> - –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è
‚Ä¢ /beer <—á–∏—Å–ª–æ> - –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–ª. –ø–∏–≤–∞
‚Ä¢ /stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /total - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:
‚Ä¢ 100, 250, 500, 1000, 2500, 5000, 10000 –æ—Ç–∂–∏–º–∞–Ω–∏–π
‚Ä¢ –û—Å–æ–±—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤–∞–∂–Ω—ã–µ —Ä—É–±–µ–∂–∏!

–ü—Ä–∏–º–µ—Ä: /pushup 50
    """
    await update.message.reply_text(welcome_text)


async def pushup_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /pushup –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π"""
    try:
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π!\n–ü—Ä–∏–º–µ—Ä: /pushup 50")
            return

        count = int(context.args[0])
        if count < 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
        if count == 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")
            return
        if count > 10000:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ! –ú–∞–∫—Å–∏–º—É–º 10000 –∑–∞ —Ä–∞–∑.")
            return

        user_id = update.effective_user.id
        username = update.effective_user.username

        bot.add_pushups(user_id, username, count)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = bot.get_user_stats(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        new_achievements = bot.check_and_add_achievement(user_id, username, 'pushups', stats['pushups']['total'])

        response = f"""
‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {count} –æ—Ç–∂–∏–º–∞–Ω–∏–π!

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é:
üî• –û—Ç–∂–∏–º–∞–Ω–∏—è: {stats['pushups']['today']} —Å–µ–≥–æ–¥–Ω—è | {stats['pushups']['week']} –∑–∞ –Ω–µ–¥–µ–ª—é
üç∫ –ü–∏–≤–æ: {stats['beer']['today']} –º–ª. —Å–µ–≥–æ–¥–Ω—è | {stats['beer']['week']} –º–ª. –∑–∞ –Ω–µ–¥–µ–ª—é
        """

        await update.message.reply_text(response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
        for achievement in new_achievements:
            achievement_message = bot.get_achievement_message('pushups', achievement)
            await update.message.reply_text(achievement_message)

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n–ü—Ä–∏–º–µ—Ä: /pushup 50")
    except Exception as e:
        logger.error(f"Error in pushup_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.")


async def beer_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /beer –¥–ª—è –∑–∞–ø–∏—Å–∏ –º–ª. –º–ª. –ø–∏–≤–∞"""
    try:
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–ª. –ø–∏–≤–∞!\n–ü—Ä–∏–º–µ—Ä: /beer 2")
            return

        count = int(context.args[0])
        if count < 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–ª. –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
        if count == 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–ª. –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")
            return
        if count > 10000:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–ª. –ø–∏–≤–∞! –ú–∞–∫—Å–∏–º—É–º 10 –ª. –∑–∞ —Ä–∞–∑.")
            return

        user_id = update.effective_user.id
        username = update.effective_user.username

        bot.add_beer(user_id, username, count)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = bot.get_user_stats(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        new_achievements = bot.check_and_add_achievement(user_id, username, 'beer', stats['beer']['total'])

        response = f"""
‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {count} –º–ª. –ø–∏–≤–∞!

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é:
üî• –û—Ç–∂–∏–º–∞–Ω–∏—è: {stats['pushups']['today']} —Å–µ–≥–æ–¥–Ω—è | {stats['pushups']['week']} –∑–∞ –Ω–µ–¥–µ–ª—é
üç∫ –ü–∏–≤–æ: {stats['beer']['today']} –º–ª. —Å–µ–≥–æ–¥–Ω—è | {stats['beer']['week']} –º–ª. –∑–∞ –Ω–µ–¥–µ–ª—é
        """

        await update.message.reply_text(response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
        for achievement in new_achievements:
            achievement_message = bot.get_achievement_message('beer', achievement)
            await update.message.reply_text(achievement_message)

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n–ü—Ä–∏–º–µ—Ä: /beer 2")
    except Exception as e:
        logger.error(f"Error in beer_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.")


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        user_id = update.effective_user.id
        stats = bot.get_user_stats(user_id)

        response = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üî• –û—Ç–∂–∏–º–∞–Ω–∏—è:
  ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['pushups']['today']}
  ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['pushups']['week']}
  ‚Ä¢ –í—Å–µ–≥–æ: {stats['pushups']['total']}

üç∫ –ü–∏–≤–æ:
  ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['beer']['today']} –º–ª.
  ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['beer']['week']} –º–ª.
  ‚Ä¢ –í—Å–µ–≥–æ: {stats['beer']['total']} –º–ª.
        """

        await update.message.reply_text(response)

    except Exception as e:
        logger.error(f"Error in stats_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def total_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /total –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        all_stats = bot.get_all_users_stats()

        if not all_stats:
            await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return

        response = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∂–∏–º–∞–Ω–∏–π
        all_stats.sort(key=lambda x: x['stats']['pushups']['total'], reverse=True)

        for i, user_data in enumerate(all_stats, 1):
            username = user_data['username']
            stats = user_data['stats']

            response += f"{i}. @{username}\n"
            response += f"   üî• –û—Ç–∂–∏–º–∞–Ω–∏—è: {stats['pushups']['total']} (–Ω–µ–¥–µ–ª—è: {stats['pushups']['week']}, —Å–µ–≥–æ–¥–Ω—è: {stats['pushups']['today']})\n"
            response += f"   üç∫ –ü–∏–≤–æ: {stats['beer']['total']} –º–ª. (–Ω–µ–¥–µ–ª—è: {stats['beer']['week']} –º–ª., —Å–µ–≥–æ–¥–Ω—è: {stats['beer']['today']} –º–ª.)\n\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if len(response) > 4096:
            parts = [response[i:i + 4096] for i in range(0, len(response), 4096)]
            for part in parts:
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(response)

    except Exception as e:
        logger.error(f"Error in total_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def handle_unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    command = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å–ª–µ /
    if command.strip() == "/":
        await update.message.reply_text("‚ùå –ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if command.strip() in ["/pushup", "/beer"]:
        if command.strip() == "/pushup":
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π!\n–ü—Ä–∏–º–µ—Ä: /pushup 50")
        elif command.strip() == "/beer":
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–ª. –ø–∏–≤–∞!\n–ü—Ä–∏–º–µ—Ä: /beer 2")
        return

    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    await update.message.reply_text(
        f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /pushup <—á–∏—Å–ª–æ> - –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ /beer <—á–∏—Å–ª–æ> - –∑–∞–ø–∏—Å–∞—Ç—å –ø–∏–≤–æ\n"
        "‚Ä¢ /stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ /total - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ /start - —Å–ø—Ä–∞–≤–∫–∞"
    )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("pushup", pushup_command))
        application.add_handler(CommandHandler("beer", beer_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("total", total_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
        application.add_handler(MessageHandler(filters.COMMAND, handle_unknown_command))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("ü§ñ –§–∏—Ç–Ω–µ—Å-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway!")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise


if __name__ == '__main__':
    main()